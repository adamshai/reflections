Q: What happens when you initialize a repository? Why do you need to do it?
A: Initialization creates a directory named .git. We need it to keep track of the git changes

Q: How is the staging area different from the working directory and the repository? What value do you think it offers?
A: Staging area includes the files in the working directory that are scheduled for commit, it helps to create smaller checkins 

Q: How can you use the staging area to make sure you have one commit per logical change?
A: Make sure "git diff --staged" shows only changes related to the logcal change

Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A: Development of several features in the same time, or bug fix

Q: How do the diagrams help you visualize the branch structure?
A: Diagrams are ordered by their timestamp and they show branch creation and associate the commit to a branch

Q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A: One branch with both modifications. The merge change will have two parents, one from each branch. "git log" will show the commits by timestamp. To see the diff from a commit to its actual parent use "git show <commit-id>"


Q: What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
A: pros - easy, quick. cons - Git cannot resolve all conflicts, e.g. when both branches changed the same line




